import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;


public class ArrayStrings {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String test = "acrfaedf";
		char[] s = test.toCharArray();
		mergesort(s, 0, test.length()-1);
		//System.out.println(unique(test.toCharArray()));
		System.out.println(s);
	}
	
	
	/**** 
	 * Implement an algorithm to determine if a string has all unique characters
	 */
	static boolean unique( char[] s ){
		BitSet 	mask = new BitSet();
		
		for(char c: s){
			if (mask.get(c))
				return false;
			mask.set(c);
		}
		return true;
	}
	
	/** same as before without using additional data structures 
	 * */
	
	
	static void mergesort(char[] s, int sx, int dx ){
		int center = 0;
		
	    if (sx < dx) {
	        center = ( sx + dx) / 2;
	        mergesort(s, sx, center);
	        mergesort(s, center+1, dx);
	        merge(s, sx, center, dx);
	    }
		
	}
	
	static void merge(char[] s, int sx, int center, int dx){
		ArrayList<Character> support = new ArrayList<Character>();
		//char[] support = new char[s.length];
		int i = sx;
		int j = dx;
		//int k = 0;
		
		while( (i<=center) && (j<=dx) ){
			if(s[i] < s[j]){
				support.add(s[i]);
				i ++;
				//k++;
			}
			else{
				support.add(s[j]);
				j ++;
				//k ++;
			}
		}
		
		for( ; i<=center; i++){
			support.add(s[i]);
			//k ++;
		}
		
		for(; j<=dx; j++){
			support.add( s[j] );
			//k ++;
		}		
			
		for(int k = 0; k<support.size(); k++ )
			s[sx++] = support.get(k);
		
		System.out.println(s);
			
//			s = support;
		
	}
	
	static boolean uniqueness( char[] s){
		mergesort(s, 0, s.length );
		
		return true;
		
	}

}
